# envguard/assets/default_project_config.yml
# EnvGuard Project Configuration File
# This file defines how EnvGuard manages environment variables for your project.
# It is typically located in your project's root directory (e.g., my-app/envguard.yml).
# Settings here will override global settings from ~/.config/envguard/config.yml.

# --- Project Metadata ---
# A human-readable name for your project. Auto-filled during `envguard init`.
project_name: {project_name} # Example: My Web Application

# The current active environment profile.
# When you run EnvGuard commands (like `envguard profile view`) without
# specifying a profile, this one will be used by default.
active_profile: {default_profile_name} # Example: dev

# --- Project Root ---
# Specifies the actual root directory of your project, relative to the location
# of this `envguard.yml` file.
# Use '.' if `envguard.yml` is in the project's top-level directory.
# Example: If `envguard.yml` is in `config/envguard.yml` and your project root
# is the parent directory, set `project_root: ../`
project_root: .

# --- Environment Profiles ---
# Define different named environment profiles (e.g., 'dev', 'staging', 'production').
# Each profile specifies the main environment file it manages, its template,
# and the parser to use.
profiles:
  {default_profile_name}:
    # Path to your main environment file, relative to the 'project_root'.
    # This file contains your actual sensitive environment variables
    # (and should ALWAYS be ignored by Git - see your `.gitignore`).
    main_file: {default_main_file_name} # Example: .env, .env.local, config/settings.py

    # Path to your template environment file, relative to the 'project_root'.
    # This file typically contains placeholders for sensitive values and
    # should be committed to version control.
    template_file: {default_template_env_file_name} # Example: .env.template, .env.example

    # Parser type for this profile's environment files.
    # Supported options:
    # - 'default': Standard .env file format (KEY=VALUE).
    # - 'json': JSON file where top-level keys are variable names.
    # - 'yaml': YAML file where top-level keys are variable names.
    # - 'python_settings': Python file containing assignments (e.g., settings.py).
    # You can add custom parsers/writers (advanced feature).
    parser: default # Example: default, python_settings

    # Optional: Initial values to populate the 'main_file' if it's newly created
    # during `envguard onboard`. These are non-sensitive default values.
    # initial_values:
    #   APP_PORT: "8000"
    #   DEBUG_MODE: "true"
    #   SERVICE_ENDPOINT: "http://localhost:3000/api"

    # Optional: Schema for validating environment variables within this profile.
    # EnvGuard uses this to ensure variables conform to expected types, formats,
    # and presence requirements.
    # Schema keys correspond to environment variable names.
    # Each variable can have rules like:
    #   - required: (boolean) Is this variable mandatory?
    #   - type: (string) 'string', 'integer', 'boolean', 'float', 'array'.
    #   - description: (string) A helpful description shown during interactive prompts.
    #   - default: (any) A default value used if the variable is missing and not required.
    #   - enum: (list) A list of allowed string values.
    #   - pattern: (string) A regex pattern the value must match (e.g., "^[a-f0-9]{32}$").
    #   - min/max: (number) For 'integer' or 'float' types.
    #   - minLength/maxLength: (integer) For 'string' types.
    #   - placeholder: (string) Custom placeholder for `envguard template generate` (overrides sensitive_keys masking).
    #
    # Example Schema:
    # schema:
    #   DATABASE_URL:
    #     type: string
    #     required: true
    #     description: Connection string for the database (e.g., postgresql://user:pass@host:port/db).
    #     pattern: "^(postgres|mysql|sqlite)://.+$"
    #     placeholder: "YOUR_DATABASE_CONNECTION_STRING"
    #   APP_ENV:
    #     type: string
    #     required: true
    #     enum: ["development", "staging", "production"]
    #     default: "development"
    #     description: The environment the application is running in.
    #   FEATURE_FLAG_ENABLED:
    #     type: boolean
    #     default: false
    #     description: Controls a new feature.
    #   LOG_LEVEL:
    #     type: string
    #     default: "INFO"
    #     enum: ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]

    # Optional: Path to a setup script to execute when 'envguard onboard' is run for this profile.
    # This script will be run from the 'project_root' directory.
    # Example: 'scripts/install_dependencies.sh', 'python scripts/db_setup.py'
    # setup_script:

  # Example of another profile: 'staging'
  # staging:
  #   main_file: .env.staging
  #   template_file: .env.staging.template
  #   parser: default
  #   initial_values:
  #     API_BASE_URL: "https://api.staging.example.com"
  #   # Profile-specific secret scanning exclusions (merged with global and project-level ones)
  #   secret_scanning:
  #     exclude_file_patterns:
  #       - "test_data/**"
  #     exclude_variable_names:
  #       - TEST_API_KEY

# --- Secret Scanning Configuration ---
# Global settings for detecting sensitive information within this project's files.
secret_scanning:
  # Enable or disable the secret scanning feature for this project.
  enable: true

  # List of file path patterns (glob-like regex) to exclude from secret scanning.
  # These override any patterns in the global config.
  # Examples: "node_modules/**", "*.log", "build/**", "tmp/**".
  # It's HIGHLY RECOMMENDED to exclude your main .env file here.
  exclude_file_patterns:
    - {default_main_file_name} # Automatically exclude the main .env file for the default profile
    - "*.log"
    - "node_modules/**"
    - "dist/**"
    - "venv/**"
    - "__pycache__/**"
    - "temp/**"

  # List of environment variable names (case-insensitive) to exclude from secret detection.
  # Useful if a generic regex pattern accidentally flags a common non-secret variable name.
  exclude_variable_names:
    - EXAMPLE_KEY
    - DEBUG_FLAG

  # Custom regex patterns for secret detection, specific to this project.
  # These are merged with EnvGuard's built-in patterns and global custom patterns.
  # Format: "PatternName": "regex_string"
  # Example:
  # custom_patterns:
  #   MY_PROJECT_TOKEN: "proj_tkn_[a-f0-9]{32}"
  #   INTERNAL_CREDENTIAL: "cred_prod_[0-9]{10}"

# --- Sensitive Key Identification ---
# List of environment variable names (case-insensitive) that are always considered sensitive
# within this project. These are merged with global and built-in sensitive keys.
# Values for these keys will be masked in `envguard profile view` and replaced with
# placeholders in `envguard template generate` (unless schema.placeholder is defined).
sensitive_keys:
  - API_SECRET
  - PAYMENT_GATEWAY_KEY
  - SMTP_PASSWORD

# --- Template Generation Settings ---
# Settings for how template files (`envguard template generate`) are created.
template_generation:
  # Default format for placeholders inserted into templates.
  # '{KEY_NAME}' will be replaced by the variable's name (original case).
  # '{KEY_NAME_UPPER}' will be replaced by the variable's name (uppercase).
  placeholder_format: YOUR_{KEY_NAME_UPPER}_HERE # Example: YOUR_API_KEY_HERE

  # List of variable names (case-insensitive) to completely exclude from template generation.
  # These variables will not appear in the generated template file at all.
  exclude_from_template_by_key: []
    # - LOCAL_DEVELOPMENT_ONLY_VAR
    # - TEMPORARY_TEST_VALUE

  # List of regex patterns. If a variable's *value* (from the main .env file)
  # matches any of these patterns, that variable will be excluded from the template.
  # Useful for excluding dynamically generated values or local-only temporary data
  # that should never be part of a shared template.
  exclude_from_template_by_value_pattern: []
    # - "^temp_.*$" # Exclude any value starting with "temp_"
    # - "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$" # Exclude UUID values